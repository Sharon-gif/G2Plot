{"data":{"site":{"siteMetadata":{"playground":{"extraLib":"declare module '@antv/g2plot'{\n          import { AnimateOption } from '@antv/g2/lib/interface';\r\nimport { AnnotationPosition } from '@antv/g2/lib/interface';\r\nimport { ArcOption } from '@antv/g2/lib/interface';\r\nimport { AxisOption } from '@antv/g2/lib/interface';\r\nimport { Chart } from '@antv/g2';\r\nimport { Data as Data_2 } from '@antv/g2/lib/interface';\r\nimport { DataMarkerOption } from '@antv/g2/lib/interface';\r\nimport { DataRegionOption } from '@antv/g2/lib/interface';\r\nimport { Datum as Datum_2 } from '@antv/g2/lib/interface';\r\nimport EE from '@antv/event-emitter';\r\nimport { default as Element_2 } from '@antv/g2/lib/geometry/element';\r\nimport * as G2 from '@antv/g2';\r\nimport { Geometry } from '@antv/g2';\r\nimport { GeometryLabelCfg } from '@antv/g2/lib/interface';\r\nimport { ImageOption } from '@antv/g2/lib/interface';\r\nimport { LabelCallback } from '@antv/g2/lib/interface';\r\nimport { LegendCfg } from '@antv/g2/lib/interface';\r\nimport { LineOption } from '@antv/g2/lib/interface';\r\nimport { RegionFilterOption } from '@antv/g2/lib/interface';\r\nimport { RegionOption } from '@antv/g2/lib/interface';\r\nimport { RegionPositionBaseOption } from '@antv/g2/lib/interface';\r\nimport { ScrollbarOption } from '@antv/g2/lib/interface';\r\nimport { ShapeAttrs } from '@antv/g-base/lib/types';\r\nimport { ShapeAttrs as ShapeAttrs_2 } from '@antv/g2/lib/dependents';\r\nimport { SliderOption } from '@antv/g2/lib/interface';\r\nimport { StateOption } from '@antv/g2/lib/interface';\r\nimport { TextOption } from '@antv/g2/lib/interface';\r\nimport { TooltipOption } from '@antv/g2/lib/interface';\r\nimport { View } from '@antv/g2';\r\n\r\n/**\r\n * schema 转 G2 的适配器基类\r\n * 使用 纯函数的方式，这里只是类型定义\r\n */\r\nexport declare type Adaptor<O> = (params: Params<O>) => void;\r\n\r\ndeclare type Animation_2 = AnimateOption | boolean;\r\n\r\ndeclare type Annotation = ArcOption | ImageOption | LineOption | TextOption | RegionOption | RegionFilterOption | DataMarkerOption | DataRegionOption;\r\nexport { AnnotationPosition }\r\n\r\nexport declare class Area extends Plot<AreaOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 获取 折线图 默认配置\r\n     */\r\n    protected getDefaultOptions(options: AreaOptions): any;\r\n    /**\r\n     * 获取 面积图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<AreaOptions>;\r\n}\r\n\r\ndeclare interface AreaGeometryOptions extends GeometryOptions {\r\n    /** x 轴字段 */\r\n    readonly xField?: string;\r\n    /** y 轴字段 */\r\n    readonly yField?: string;\r\n    /** 分组字段 */\r\n    readonly seriesField?: string;\r\n    /** 是否平滑 */\r\n    readonly smooth?: boolean;\r\n    /** area 图形的样式设置 */\r\n    readonly area?: MappingOptions;\r\n}\r\n\r\n/** 面积图的配置类型定义 */\r\nexport declare interface AreaOptions extends Options {\r\n    /** x 轴字段 */\r\n    readonly xField?: string;\r\n    /** y 轴字段 */\r\n    readonly yField?: string;\r\n    /** 分组字段 */\r\n    readonly seriesField?: string;\r\n    /** 是否平滑 */\r\n    readonly smooth?: boolean;\r\n    /** 面积图形样式 */\r\n    readonly areaStyle?: StyleAttr;\r\n    /** 面积中折线的样式 */\r\n    readonly line?: LineGeometryOptions['line'];\r\n    /** 面积图数据点图形样式 */\r\n    readonly point?: PointGeometryOptions['point'];\r\n}\r\n\r\ndeclare type Axis = AxisOption & {\r\n    /**\r\n     * 是否美化\r\n     */\r\n    readonly nice?: boolean;\r\n    /**\r\n     * 坐标轴最小值\r\n     */\r\n    readonly min?: number;\r\n    /**\r\n     * 坐标轴最大值\r\n     */\r\n    readonly max?: number;\r\n    /**\r\n     * min limit\r\n     */\r\n    readonly minLimit?: number;\r\n    /**\r\n     * max limit\r\n     */\r\n    readonly maxLimit?: number;\r\n    /**\r\n     * 期望的坐标轴刻度数量，非最终结果\r\n     */\r\n    readonly tickCount?: number;\r\n    /**\r\n     * 坐标轴刻度间隔\r\n     */\r\n    readonly tickInterval?: number;\r\n    /**\r\n     * 自定义计算 tick 的方法\r\n     */\r\n    readonly tickMethod?: (scale: any) => any[];\r\n};\r\n\r\n/**\r\n * 条形图\r\n */\r\nexport declare class Bar extends Plot<BarOptions> {\r\n    /** 图表类型 */\r\n    readonly type: string;\r\n    /**\r\n     * 获取 条形图 默认配置\r\n     */\r\n    protected getDefaultOptions(): any;\r\n    /**\r\n     * 获取 条形图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<BarOptions>;\r\n}\r\n\r\nexport declare interface BarOptions extends Omit<ColumnOptions, 'columnStyle' | 'columnWidthRatio'> {\r\n    readonly barStyle?: ColumnOptions['columnStyle'];\r\n    readonly barWidthRatio?: ColumnOptions['columnWidthRatio'];\r\n}\r\n\r\ndeclare type BasicStyle = {\r\n    color?: ColorAttr;\r\n    style?: StyleAttr;\r\n    size?: SizeAttr;\r\n};\r\n\r\n/** 位置 */\r\nexport declare type BBox = {\r\n    readonly x: number;\r\n    readonly y: number;\r\n    readonly width: number;\r\n    readonly height: number;\r\n};\r\n\r\nexport declare class Box extends Plot<BoxOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 获取 箱型图 默认配置项\r\n     */\r\n    protected getDefaultOptions(): Partial<BoxOptions>;\r\n    /**\r\n     * 获取 箱型图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<BoxOptions>;\r\n}\r\n\r\nexport declare interface BoxOptions extends Options {\r\n    /** x 轴字段 */\r\n    readonly xField: string;\r\n    /** y 轴映射 box range [low, q1, median, q3, high] 五个字段 or 一个数组字段 */\r\n    readonly yField: string | [string?, string?, string?, string?, string?];\r\n    /** 箱型样式配置，可选 */\r\n    readonly boxStyle?: StyleAttr;\r\n    /** 分组拆分字段，默认是分组情况，颜色作为视觉通道 */\r\n    readonly groupField?: string;\r\n    /** 异常值字段 */\r\n    readonly outliersField?: string;\r\n    /** 异常值样式 */\r\n    readonly outliersStyle?: StyleAttr;\r\n}\r\n\r\nexport declare class Bullet extends Plot<BulletOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 获取子弹图的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<BulletOptions>;\r\n    protected getDefaultOptions(): any;\r\n}\r\n\r\nexport declare interface BulletOptions extends Options {\r\n    /** 弹图标题，用于区分不同的类型 */\r\n    readonly xField?: string;\r\n    /** 使用数据条的长度，表示实际数值字段，所表示值为 number[]*/\r\n    readonly measureField: string;\r\n    /** 使用背景色条的长度，表示区间范围 [20,50,100], 所表示值为 number[]*/\r\n    readonly rangeField: string;\r\n    /** 使用测量标记的刻度轴位置，表示目标值,所表示值为数值 */\r\n    readonly targetField: string;\r\n    /** label 设置 */\r\n    readonly label?: GeometryLabelCfg;\r\n    /** bulletStyle 包含了 measure,target,range */\r\n    readonly bulletStyle?: {\r\n        measure?: BasicStyle;\r\n        target?: BasicStyle;\r\n        range?: BasicStyle;\r\n    };\r\n    /** layout 方向选择*/\r\n    layout?: 'horizontal' | 'vertical';\r\n}\r\n\r\n/** 颜色映射 */\r\nexport declare type ColorAttr = string | string[] | ((datum: Datum) => string);\r\n\r\n/**\r\n * 柱形图\r\n */\r\nexport declare class Column extends Plot<ColumnOptions> {\r\n    /** 图表类型 */\r\n    readonly type: string;\r\n    /**\r\n     * 获取 柱形图 默认配置\r\n     */\r\n    protected getDefaultOptions(): any;\r\n    /**\r\n     * 获取 柱形图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<ColumnOptions>;\r\n}\r\n\r\nexport declare interface ColumnOptions extends Options {\r\n    /** x 轴字段 */\r\n    readonly xField: string;\r\n    /** y 轴字段 */\r\n    readonly yField: string;\r\n    /** 拆分字段，在分组柱状图下同 groupField、colorField，在堆积柱状图下同 stackField、colorField  */\r\n    readonly seriesField?: string;\r\n    /** 是否分组柱形图 */\r\n    readonly isGroup?: boolean;\r\n    /** 是否堆积柱状图 */\r\n    readonly isStack?: boolean;\r\n    /** 柱状图宽度占比 [0-1] */\r\n    readonly columnWidthRatio?: number;\r\n    /** 分组中柱子之间的间距 [0-1]，仅对分组柱状图适用 */\r\n    readonly marginRatio?: number;\r\n    /** 柱子样式配置，可选 */\r\n    readonly columnStyle?: StyleAttr;\r\n}\r\n\r\ndeclare type CommonGeometryOption = {\r\n    readonly geometry?: string;\r\n    readonly label?: Options['label'];\r\n    readonly color?: Options['color'];\r\n};\r\n\r\n/** 一个数据序列 */\r\nexport declare type Data = Datum[];\r\n\r\ndeclare interface DataItem {\r\n    /** 文本内容 */\r\n    text: string;\r\n    /** 该文本所占权重 */\r\n    value: number;\r\n    /** 字体 */\r\n    font: string;\r\n    /** 字体样式 */\r\n    style: ShapeAttrs_2['fontStyle'];\r\n    /** 文本粗细 */\r\n    weight: FontWeight;\r\n    /** 旋转角度 */\r\n    rotate: number;\r\n    /** 字体大小 */\r\n    size: number;\r\n    /** 一个单词所占的盒子的内边距，值越大单词之间的间隔越大 */\r\n    padding: number;\r\n    /** 是否包含文本 */\r\n    hasText?: boolean;\r\n    /** 单词所占盒子的宽度 */\r\n    width?: number;\r\n    /** 单词所占盒子的高度 */\r\n    height?: number;\r\n    /** x 轴坐标 */\r\n    x?: number;\r\n    /** y 轴坐标 */\r\n    y?: number;\r\n    x0?: number;\r\n    y0?: number;\r\n    x1?: number;\r\n    y1?: number;\r\n    xoff?: number;\r\n    yoff?: number;\r\n}\r\n\r\n/** 一条数据记录 */\r\nexport declare type Datum = Record<string, any>;\r\n\r\nexport declare class DualAxes extends Plot<DualAxesOption> {\r\n    /** 图表类型: 双轴图 */\r\n    type: string;\r\n    /**\r\n     * 获取 双轴图 默认配置\r\n     */\r\n    protected getDefaultOptions(options: any): any;\r\n    /**\r\n     * 获取双轴图的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<DualAxesOption>;\r\n}\r\n\r\nexport declare type DualAxesOption = Omit<Options, 'data' | 'yAxis' | 'color'> & {\r\n    /** 具体的数据 */\r\n    readonly data: Array<Record<string, any>[]>;\r\n    readonly xField: string;\r\n    readonly yField: string[];\r\n    readonly geometryOptions?: GeometryOption[];\r\n    readonly yAxis?: Options['yAxis'][];\r\n};\r\n\r\n/**\r\n * 类似 lodash.flow 的方法\r\n * @param flows\r\n */\r\nexport declare function flow<P>(...flows: FlowFunction<P>[]): FlowFunction<P>;\r\n\r\ndeclare type FlowFunction<P> = (param: P) => P;\r\n\r\ndeclare type FontWeight = ShapeAttrs_2['fontWeight'];\r\n\r\nexport declare class Funnel extends Plot<FunnelOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 获取 漏斗图 默认配置项\r\n     */\r\n    protected getDefaultOptions(options: FunnelOptions): Partial<FunnelOptions>;\r\n    /**\r\n     * 获取 漏斗图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<FunnelOptions>;\r\n}\r\n\r\nexport declare interface FunnelOptions extends Options {\r\n    /** x 轴字段 */\r\n    readonly xField?: string;\r\n    /** y 轴字段 */\r\n    readonly yField?: string;\r\n    /** 对比字段 */\r\n    readonly compareField?: string;\r\n    /** 是否转置 */\r\n    readonly transpose?: boolean;\r\n    /** 是否是动态高度 */\r\n    readonly dynamicHeight?: boolean;\r\n    /** annotation 文本 */\r\n    readonly annotation?: false | string | ((...args: any[]) => string);\r\n}\r\nexport { G2 }\r\n\r\n/**\r\n * 给 G2Plot 提供非常简单的开放开发的机制。目的是能够让社区和业务上自己基于 G2Plot 开发自己的定制图表库。主要分成几类图表：\r\n * 1. 领域专业的图表，内部同学因为没有场景，不一定能做的完善。\r\n * 2. 定制业务的图表，不具备通用性\r\n * 3. 趣味性的可视化组件\r\n * 然后官方可以根据社区的情况，可以进行一些官方推荐和采纳。\r\n *\r\n * 如果使用？\r\n *\r\n * ```ts\r\n * import { G2Plot } from '@antv/g2plot';\r\n * import { GeoWorldMap, GeoWorldMapOptions } from 'g2plot-geo-world-map';\r\n *\r\n * const plot = new G2Plot('container', {\r\n *   geoJson: '',\r\n *   longitude: '',\r\n *   latitude: '',\r\n * }, GeoWorldMap);\r\n *\r\n * plot.render();\r\n * ```\r\n */\r\nexport declare class G2Plot<O extends PickOptions> extends Plot<O> {\r\n    /** 统一为 any plot */\r\n    readonly type = \"g2-plot\";\r\n    /** 外部传入的 adaptor 函数 */\r\n    private adaptor;\r\n    /**\r\n     * 相比普通图表增加 adaptor 参数。\r\n     * @param container\r\n     * @param options\r\n     * @param adaptor\r\n     * @param defaultOptions\r\n     */\r\n    constructor(container: string | HTMLElement, options: O, adaptor: Adaptor<O>, defaultOptions?: Partial<O>);\r\n    /**\r\n     * 实现父类方法，直接使用传入的\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<O>;\r\n}\r\n\r\ndeclare type GeometryColumnOption = Pick<ColumnOptions, 'seriesField' | 'isGroup' | 'isStack' | 'columnWidthRatio' | 'marginRatio' | 'columnStyle'> & CommonGeometryOption;\r\n\r\ndeclare type GeometryLineOption = Pick<LineOptions, 'seriesField' | 'smooth' | 'connectNulls' | 'lineStyle' | 'point'> & CommonGeometryOption;\r\n\r\ndeclare type GeometryOption = GeometryColumnOption | GeometryLineOption;\r\n\r\ndeclare interface GeometryOptions extends Options {\r\n    /** geometry 类型 */\r\n    readonly type: string;\r\n    /** x 轴字段 */\r\n    readonly xField?: string;\r\n    /** y 轴字段 */\r\n    readonly yField?: string;\r\n    /** 分组字段 */\r\n    readonly colorField?: string;\r\n    /** shape 的映射字段 */\r\n    readonly shapeField?: string;\r\n    /** size 映射字段 */\r\n    readonly sizeField?: string;\r\n    /** style 的映射字段 */\r\n    readonly styleField?: string;\r\n    /** 图形映射规则 */\r\n    readonly mapping: MappingOptions;\r\n    /** geometry params */\r\n    readonly args?: any;\r\n}\r\n\r\nexport declare class Heatmap extends Plot<HeatmapOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 获取直方图的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<HeatmapOptions>;\r\n}\r\n\r\nexport declare interface HeatmapOptions extends Options {\r\n    /** x 轴字段 */\r\n    readonly xField: string;\r\n    /** y 轴字段 */\r\n    readonly yField: string;\r\n    /** 颜色字段，可选 */\r\n    readonly colorField?: string;\r\n    /** 点大小映射对应的数据字段名，可选 */\r\n    readonly sizeField?: string;\r\n    /** 热力格子中的形状，可选 */\r\n    readonly shapeType?: string;\r\n    /** 热力格子中图形的尺寸比例，可选，只有当 shapeType 和 sizeField 至少指定一项后才生效 */\r\n    readonly sizeRatio?: number;\r\n    /** 热力图形样式 */\r\n    readonly heatmapStyle?: StyleAttr;\r\n}\r\n\r\nexport declare class Histogram extends Plot<HistogramOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 获取直方图的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<HistogramOptions>;\r\n}\r\n\r\nexport declare interface HistogramOptions extends Options {\r\n    /** 设置直方图绘制 (进行分箱) 的字段 */\r\n    readonly binField: string;\r\n    /**\r\n     *  设置直方图的分箱宽度，binWidth 影响直方图分成多少箱,\r\n     *  不能与binNumber一起使用\r\n     */\r\n    readonly binWidth?: number;\r\n    /** 设置直方图的分箱数量，binNumber 影响直方图分箱后每个柱子的宽度 */\r\n    readonly binNumber?: number;\r\n    /** 指定层叠字段，通过该字段的值，柱子将会被分割为多个部分，通过颜色进行区分 */\r\n    readonly stackField?: string;\r\n    /** 柱子样式配置，可选 */\r\n    readonly columnStyle?: StyleAttr;\r\n}\r\n\r\ndeclare type Interaction = {\r\n    readonly type: string;\r\n    readonly cfg?: Record<string, any>;\r\n    /** 是否开启交互, 默认开启 */\r\n    readonly enable?: boolean;\r\n};\r\n\r\ndeclare type Label = false | ({\r\n    /** 映射的字段。 */\r\n    readonly fields?: string[];\r\n    /** 回调函数。 */\r\n    readonly callback?: LabelCallback;\r\n} & GeometryLabelCfg);\r\n\r\ndeclare interface Labels extends Omit<TextOption, 'position'> {\r\n    position?: AnnotationPosition;\r\n}\r\n\r\ndeclare type Legend = boolean | LegendCfg;\r\n\r\nexport declare class Line extends Plot<LineOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 获取 折线图 默认配置\r\n     */\r\n    protected getDefaultOptions(options: LineOptions): any;\r\n    /**\r\n     * 获取 折线图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<LineOptions>;\r\n}\r\n\r\ndeclare interface LineGeometryOptions extends GeometryOptions {\r\n    /** x 轴字段 */\r\n    readonly xField?: string;\r\n    /** y 轴字段 */\r\n    readonly yField?: string;\r\n    /** 分组字段 */\r\n    readonly seriesField?: string;\r\n    /** 是否平滑 */\r\n    readonly smooth?: boolean;\r\n    /** 是否连接空数据 */\r\n    readonly connectNulls?: boolean;\r\n    /** line 映射配置 */\r\n    readonly line?: LineOption_2;\r\n}\r\n\r\ndeclare type LineOption_2 = {\r\n    /** line color 映射, 提供回调的方式, 不开放 field 映射配置 */\r\n    readonly color?: ColorAttr;\r\n    /** 样式映射 */\r\n    readonly style?: StyleAttr;\r\n    /** 折线宽度 */\r\n    readonly size?: SizeAttr;\r\n};\r\n\r\nexport declare interface LineOptions extends Options {\r\n    /** x 轴字段 */\r\n    readonly xField?: string;\r\n    /** y 轴字段 */\r\n    readonly yField?: string;\r\n    /** 分组字段 */\r\n    readonly seriesField?: string;\r\n    /** 是否平滑 */\r\n    readonly smooth?: boolean;\r\n    /** 是否连接空数据 */\r\n    readonly connectNulls?: boolean;\r\n    /** 折线图形样式 */\r\n    readonly lineStyle?: StyleAttr;\r\n    /** 折线数据点图形样式 */\r\n    readonly point?: PointGeometryOptions['point'];\r\n}\r\n\r\n/**\r\n * 传说中的水波图\r\n */\r\nexport declare class Liquid extends Plot<LiquidOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    protected getDefaultOptions(): Partial<LiquidOptions>;\r\n    /**\r\n     * 获取适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<LiquidOptions>;\r\n}\r\n\r\n/** 配置类型定义 */\r\nexport declare interface LiquidOptions extends Omit<Options, 'data'> {\r\n    /** 指标比例 */\r\n    readonly percent: number;\r\n    /** 配置水波图的颜色，使用默认色板的颜色 */\r\n    readonly color?: ColorAttr;\r\n    /** 配置水波图的样式 */\r\n    readonly liquidStyle?: StyleAttr;\r\n    /** 水波的外半径， 0 ~ 1，默认为 0.9 */\r\n    readonly radius?: number;\r\n    /** 指标文本组件 */\r\n    readonly statistic?: Statistic;\r\n}\r\n\r\n/**\r\n * 图形映射属性，按照优先级来的\r\n */\r\ndeclare type MappingOptions = {\r\n    /** point color 映射 */\r\n    readonly color?: ColorAttr;\r\n    /** point shape 映射 */\r\n    readonly shape?: ShapeAttr;\r\n    /** 大小映射, 提供回调的方式 */\r\n    readonly size?: SizeAttr;\r\n    /** 样式映射 */\r\n    readonly style?: StyleAttr;\r\n};\r\n\r\n/** scale 元信息，取名为 meta */\r\nexport declare type Meta = {\r\n    readonly type?: string;\r\n    readonly alias?: string;\r\n    readonly values?: string[];\r\n    readonly range?: number[];\r\n    readonly formatter?: (v: any) => string;\r\n};\r\n\r\n/** 基础的 Options 配置 */\r\nexport declare type Options = {\r\n    /** 画布宽度 */\r\n    readonly width?: number;\r\n    /** 画布高度 */\r\n    readonly height?: number;\r\n    /** 画布是否自动适配容器大小，默认为 true */\r\n    readonly autoFit?: boolean;\r\n    /** 画布的 padding 值，或者开启 'auto' */\r\n    readonly padding?: number[] | number | 'auto';\r\n    /** 额外怎加的 padding 值 */\r\n    readonly appendPadding?: number[] | number;\r\n    /** 是否同步子 view 的 padding */\r\n    readonly syncViewPadding?: boolean;\r\n    /** 渲染引擎 */\r\n    readonly renderer?: 'svg' | 'canvas';\r\n    /** 屏幕像素比，默认为 window.devicePixelRatio */\r\n    readonly pixelRatio?: number;\r\n    /** 是否开启局部渲染，默认为 true */\r\n    readonly localRefresh?: boolean;\r\n    /** 具体的数据 */\r\n    readonly data: Record<string, any>[];\r\n    /** 数据字段元信息 */\r\n    readonly meta?: Record<string, any>;\r\n    /** 主题，G2 主题，字符串或者 theme object */\r\n    readonly theme?: string | object;\r\n    /** 颜色色板 */\r\n    readonly color?: ColorAttr;\r\n    /** xAxis 的配置项 */\r\n    readonly xAxis?: Axis;\r\n    /** yAxis 的配置项 */\r\n    readonly yAxis?: Axis;\r\n    /** 数据标签的配置 */\r\n    readonly label?: Label;\r\n    /** tooltip 的配置项 */\r\n    readonly tooltip?: Tooltip;\r\n    /** 图例 legend 的配置项 */\r\n    readonly legend?: Legend;\r\n    /** 缩略轴 slider 的配置项 */\r\n    readonly slider?: SliderOption;\r\n    /** 缩略轴 scrollbar 的配置项 */\r\n    readonly scrollbar?: ScrollbarOption;\r\n    readonly animation?: Animation_2;\r\n    readonly interactions?: Interaction[];\r\n    readonly annotations?: Annotation[];\r\n    readonly state?: State;\r\n};\r\n\r\n/**\r\n * adaptor flow 的参数\r\n */\r\nexport declare type Params<O> = {\r\n    readonly chart: View;\r\n    readonly options: O;\r\n    /** 一些存储一些扩展信息，用户上游 adaptor 向下游传递临时数据 */\r\n    readonly ext?: Record<string, any>;\r\n};\r\n\r\n/** 单独 pick 出来的用于基类的类型定义 */\r\ndeclare type PickOptions = Pick<Options, 'width' | 'height' | 'padding' | 'appendPadding' | 'renderer' | 'pixelRatio' | 'autoFit' | 'syncViewPadding'>;\r\n\r\nexport declare class Pie extends Plot<PieOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 获取 饼图 默认配置项\r\n     */\r\n    protected getDefaultOptions(): Partial<PieOptions>;\r\n    /**\r\n     * 获取 饼图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<PieOptions>;\r\n}\r\n\r\nexport declare interface PieOptions extends Options {\r\n    /** 角度映射字段 */\r\n    readonly angleField: string;\r\n    /** 颜色映射字段 */\r\n    readonly colorField?: string;\r\n    /** 饼图半径 */\r\n    readonly radius?: number;\r\n    /** 饼图内半径 */\r\n    readonly innerRadius?: number;\r\n    /** 饼图图形样式 */\r\n    readonly pieStyle?: StyleAttr;\r\n    /**\r\n     * 指标卡组件: 显示在环图中心，可以代替tooltip，显示环图数据的总计值和各项数据\r\n     * 启用 statistic 组件的同时将自动关闭tooltip\r\n     */\r\n    readonly statistic?: Statistic;\r\n}\r\n\r\n/**\r\n * 所有 plot 的基类\r\n */\r\nexport declare abstract class Plot<O extends PickOptions> extends EE {\r\n    /** plot 类型名称 */\r\n    abstract readonly type: string;\r\n    /** plot 的 schema 配置 */\r\n    options: O;\r\n    /** plot 绘制的 dom */\r\n    readonly container: HTMLElement;\r\n    /** G2 chart 实例 */\r\n    chart: Chart;\r\n    /** resizer unbind  */\r\n    private unbind;\r\n    constructor(container: string | HTMLElement, options: O);\r\n    /**\r\n     * 创建 G2 实例\r\n     */\r\n    private createG2;\r\n    /**\r\n     * 计算默认的 chart 大小。逻辑简化：如果存在 width 或 height，则直接使用，否则使用容器大小\r\n     * @param width\r\n     * @param height\r\n     */\r\n    private getChartSize;\r\n    /**\r\n     * 绑定代理所有 G2 的事件\r\n     */\r\n    private bindEvents;\r\n    /**\r\n     * 获取默认的 options 配置项\r\n     * 每个组件都可以复写\r\n     */\r\n    protected getDefaultOptions(options?: O): Partial<Options>;\r\n    /**\r\n     * 每个组件有自己的 schema adaptor\r\n     */\r\n    protected abstract getSchemaAdaptor(): Adaptor<O>;\r\n    /**\r\n     * 绘制\r\n     */\r\n    render(): void;\r\n    /**\r\n     * 更新配置\r\n     * @param options\r\n     */\r\n    update(options: O): void;\r\n    /**\r\n     * 设置状态\r\n     * @param type 状态类型，支持 'active' | 'inactive' | 'selected' 三种\r\n     * @param conditions 条件，支持数组\r\n     * @param status 是否激活，默认 true\r\n     */\r\n    setState(type: StateName, condition: StateCondition, status?: boolean): void;\r\n    /**\r\n     * 获取状态\r\n     */\r\n    getStates(): StateObject[];\r\n    /**\r\n     * 更新数据\r\n     * @param options\r\n     */\r\n    changeData(data: any): void;\r\n    /**\r\n     * 修改画布大小\r\n     * @param width\r\n     * @param height\r\n     */\r\n    changeSize(width: number, height: number): void;\r\n    /**\r\n     * 销毁\r\n     */\r\n    destroy(): void;\r\n    /**\r\n     * 执行 adaptor 操作\r\n     */\r\n    protected execAdaptor(): void;\r\n    /**\r\n     * 当图表容器大小变化的时候，执行的函数\r\n     */\r\n    protected triggerResize(): void;\r\n    /**\r\n     * 绑定 dom 容器大小变化的事件\r\n     */\r\n    private bindSizeSensor;\r\n    /**\r\n     * 取消绑定\r\n     */\r\n    private unbindSizeSensor;\r\n}\r\n\r\n/** 点位置信息 */\r\nexport declare type Point = {\r\n    readonly x: number;\r\n    readonly y: number;\r\n};\r\n\r\ndeclare interface PointGeometryOptions extends GeometryOptions {\r\n    /** x 轴字段 */\r\n    readonly xField?: string;\r\n    /** y 轴字段 */\r\n    readonly yField?: string;\r\n    /** 分组字段 */\r\n    readonly seriesField?: string;\r\n    /** size 映射字段 */\r\n    readonly sizeField?: string;\r\n    /** shape 的映射字段 */\r\n    readonly shapeField?: string;\r\n    /** point 图形映射规则 */\r\n    readonly point?: MappingOptions;\r\n}\r\n\r\nexport declare class Progress extends Plot<ProgressOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    protected getDefaultOptions(): {\r\n        percent: number;\r\n        color: string[];\r\n    };\r\n    /**\r\n     * 获取 进度图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<ProgressOptions>;\r\n}\r\n\r\n/** mini 图类型定义需要 omit 很多的 G2 Options 配置 */\r\nexport declare interface ProgressOptions extends Omit<Options, 'data' | 'color'> {\r\n    /** 进度百分比 */\r\n    readonly percent: number;\r\n    /** 条图宽度占比 [0-1] */\r\n    readonly barWidthRatio?: number;\r\n    /** 进度条颜色 */\r\n    readonly color?: ColorAttr;\r\n    /** 进度条样式 */\r\n    readonly progressStyle?: StyleAttr;\r\n}\r\n\r\ndeclare interface Quadrant {\r\n    /** x 方向上的象限分割基准线，默认为 0  */\r\n    readonly xBaseline?: number;\r\n    /** y 方向上的象限分割基准线，默认为 0  */\r\n    readonly yBaseline?: number;\r\n    /** 配置象限分割线的样式  */\r\n    readonly lineStyle?: RegionPositionBaseOption;\r\n    /** 象限样式 */\r\n    readonly regionStyle?: RegionPositionBaseOption[];\r\n    /** 象限文本配置  */\r\n    readonly labels?: Labels[];\r\n}\r\n\r\nexport declare class Radar extends Plot<RadarOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 获取 雷达图 默认配置\r\n     */\r\n    protected getDefaultOptions(): Partial<RadarOptions>;\r\n    /**\r\n     * 获取 雷达图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<RadarOptions>;\r\n}\r\n\r\nexport declare interface RadarOptions extends Options {\r\n    /** x 字段 */\r\n    readonly xField: string;\r\n    /** y 字段，映射雷达图的射线长度 */\r\n    readonly yField: string;\r\n    /** 分组字段 */\r\n    readonly seriesField?: string;\r\n    /** 是否平滑 */\r\n    readonly smooth?: boolean;\r\n    /** 折线图形样式 */\r\n    readonly lineStyle?: ShapeStyle | ((x: any, y: any, series?: any) => ShapeStyle);\r\n    /** 数据点图形样式 */\r\n    readonly point?: PointGeometryOptions['point'];\r\n    /** area 图形样式, 均提供回调的方式, 不开放 field 映射配置 */\r\n    readonly area?: AreaGeometryOptions['area'];\r\n    /** 角度轴配置 */\r\n    readonly xAxis?: any;\r\n    /** 径向轴配置 */\r\n    readonly yAxis?: any;\r\n    /** 雷达图半径 */\r\n    readonly radius?: number;\r\n}\r\n\r\n/** 一个区域描述 */\r\nexport declare type Region = {\r\n    /** the top-left corner of layer-range, range from 0 to 1, relative to parent layer's range */\r\n    readonly start: Point;\r\n    /** the bottom-right corner of layer-range, range from 0 to 1, relative to parent layer's range */\r\n    readonly end: Point;\r\n};\r\nexport { RegionPositionBaseOption }\r\n\r\nexport declare class RingProgress extends Plot<RingProgressOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    protected getDefaultOptions(): {\r\n        percent: number;\r\n        innerRadius: number;\r\n        radius: number;\r\n        color: string[];\r\n        statistic: {\r\n            content: {\r\n                style: {\r\n                    fontSize: number;\r\n                    fontWeight: number;\r\n                    fill: string;\r\n                    textAlign: string;\r\n                    textBaseline: string;\r\n                };\r\n                formatter: ({ percent }: {\r\n                    percent: any;\r\n                }) => string;\r\n            };\r\n        };\r\n    };\r\n    /**\r\n     * 获取 环形进度图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<RingProgressOptions>;\r\n}\r\n\r\n/** mini 图类型定义需要 omit 很多的 G2 Options 配置 */\r\nexport declare interface RingProgressOptions extends Omit<Options, 'data' | 'tooltip' | 'legend' | 'label' | 'color'> {\r\n    /** 进度百分比 */\r\n    readonly percent: number;\r\n    /** 外环的半径 */\r\n    readonly radius?: number;\r\n    /** 内环的半径 */\r\n    readonly innerRadius?: number;\r\n    /** 进度条颜色 */\r\n    readonly color?: ColorAttr;\r\n    /** 进度条样式 */\r\n    readonly progressStyle?: StyleAttr;\r\n    /** 统计内容组件 */\r\n    readonly statistic?: Statistic;\r\n}\r\n\r\nexport declare class Rose extends Plot<RoseOptions> {\r\n    /** 玫瑰图 */\r\n    type: string;\r\n    /**\r\n     * 获取默认的 options 配置项\r\n     */\r\n    protected getDefaultOptions(): Partial<RoseOptions>;\r\n    /**\r\n     * 获取 玫瑰图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<RoseOptions>;\r\n}\r\n\r\nexport declare interface RoseOptions extends Options {\r\n    /** 扇形切片分类所对应的数据字段名（每个扇形的弧度相等） */\r\n    readonly xField: string;\r\n    /** 扇形切片半径长度所对应的数据字段名 */\r\n    readonly yField: string;\r\n    /** 拆分字段 */\r\n    readonly seriesField?: string;\r\n    /** 是否分组玫瑰图 */\r\n    readonly isGroup?: boolean;\r\n    /** 是否堆积玫瑰图 */\r\n    readonly isStack?: boolean;\r\n    /**\r\n     * 玫瑰图的半径，原点为画布中心。配置值域为 [0,1]\r\n     * 0 代表玫瑰图大小为 0，即不显示，1 代表玫瑰图撑满绘图区域\r\n     */\r\n    readonly radius?: number;\r\n    /** 内部空心圆的半径，规则与 radius 一致 */\r\n    readonly innerRadius?: number;\r\n    /**\r\n     * 设置扇形样式。sectorStyle 中的fill会覆盖 color 的配置\r\n     * sectorStyle 可以直接指定，也可以通过 callback 的方式，根据数据为每个扇形切片指定单独的样式\r\n     */\r\n    readonly sectorStyle?: StyleAttr;\r\n}\r\n\r\nexport declare class Scatter extends Plot<ScatterOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 获取散点图的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<ScatterOptions>;\r\n    protected getDefaultOptions(options: ScatterOptions): any;\r\n}\r\n\r\nexport declare interface ScatterOptions extends Options {\r\n    /** x 轴字段 */\r\n    readonly xField: string;\r\n    /** y 轴字段 */\r\n    readonly yField: string;\r\n    /** 数据调整类型 */\r\n    readonly type?: 'jitter' | 'stack' | 'symmetric' | 'dodge';\r\n    /** 点大小映射对应的数据字段名 */\r\n    readonly sizeField?: string;\r\n    /** 散点图大小 */\r\n    readonly size?: SizeAttr;\r\n    /** 点形状映射对应的数据字段名 */\r\n    readonly shapeField?: string;\r\n    /** 散点图形状 */\r\n    readonly shape?: ShapeAttr;\r\n    /** 散点图样式 */\r\n    readonly pointStyle?: StyleAttr;\r\n    /** 点颜色映射对应的数据字段名 */\r\n    readonly colorField?: string;\r\n    /** 四象限组件 */\r\n    readonly quadrant?: Quadrant;\r\n    /** 趋势线组件，为图表添加回归曲线 */\r\n    readonly trendLine?: TrendLine;\r\n}\r\n\r\n/** 图形 shape 映射 */\r\nexport declare type ShapeAttr = string | string[] | ((datum: Datum) => string);\r\n\r\n/** 图形属性 */\r\nexport declare type ShapeStyle = ShapeAttrs;\r\n\r\nexport declare type Size = {\r\n    readonly width: number;\r\n    readonly height: number;\r\n};\r\n\r\n/** 尺寸大小映射 */\r\nexport declare type SizeAttr = number | [number, number] | ((datum: Datum) => number);\r\n\r\nexport declare type State = StateOption;\r\n\r\n/** 状态条件 */\r\nexport declare type StateCondition = (data: Datum_2 | Data_2) => boolean;\r\n\r\n/** 状态名称，G2 Element 开放 'active' | 'inactive' | 'selected' 三种状态 */\r\nexport declare type StateName = 'active' | 'inactive' | 'selected';\r\n\r\n/** 状态对象, 可通过 `plot.getStates()` 获取 */\r\nexport declare type StateObject = {\r\n    data: Datum_2 | Data_2;\r\n    state: string;\r\n    geometry: Geometry;\r\n    element: Element_2;\r\n};\r\n\r\n/**\r\n * 中心文本的统计信息，统一一个数据结构\r\n */\r\nexport declare type Statistic = {\r\n    readonly title?: false | StatisticText;\r\n    readonly content?: false | StatisticText;\r\n};\r\n\r\ndeclare type StatisticText = {\r\n    /** 统计文本的样式 */\r\n    readonly style?: StyleAttr;\r\n    /** 文本的格式化 */\r\n    readonly formatter?: (datum?: Datum, data?: Data /** filterData */) => string;\r\n    readonly rotate?: number;\r\n    readonly offsetX?: number;\r\n    readonly offsetY?: number;\r\n};\r\n\r\nexport declare class Stock extends Plot<StockOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    /**\r\n     * 默认配置\r\n     *  g2/g2plot默 认 配 置 -->  图 表 默 认 配 置  --> 开 发 者 自 定 义 配 置  --> 最 终 绘 图 配 置\r\n     */\r\n    protected getDefaultOptions(): Partial<StockOptions>;\r\n    /**\r\n     * 获取 蜡烛图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<StockOptions>;\r\n}\r\n\r\nexport declare interface StockOptions extends Options {\r\n    /** x 轴字段  日期*/\r\n    readonly xField: string;\r\n    /** y 轴映射 range  【开盘价/收盘价/最高价/最低价】\r\n     * 设置一个指定 [open, close, high, low]【开盘价/收盘价/最高价/最低价】字段的数组 */\r\n    readonly yField: [string, string, string, string];\r\n}\r\n\r\n/** 图形样式 style 映射 */\r\nexport declare type StyleAttr = ShapeStyle | ((datum: Datum) => ShapeStyle);\r\nexport { TextOption }\r\n\r\n/** 文字 */\r\nexport declare type TextStyle = {\r\n    /** 文本大小 */\r\n    readonly fontSize?: number;\r\n    /** 字体系列 */\r\n    readonly fontFamily?: string;\r\n    /** 文本粗细 */\r\n    readonly fontWeight?: number;\r\n    /** 文本行高 */\r\n    readonly lineHeight?: number;\r\n    /** 文本对齐方式 */\r\n    readonly textAlign?: 'center' | 'left' | 'right';\r\n    /** 文本基线 */\r\n    readonly textBaseline?: 'middle' | 'top' | 'bottom';\r\n};\r\n\r\nexport declare class TinyArea extends Plot<TinyAreaOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    protected getDefaultOptions(): {\r\n        tooltip: {\r\n            showTitle: boolean;\r\n            shared: boolean;\r\n            showMarkers: boolean;\r\n            containerTpl: string;\r\n            itemTpl: string;\r\n            domStyles: {\r\n                'g2-tooltip': {\r\n                    padding: string;\r\n                    fontSize: string;\r\n                };\r\n            };\r\n        };\r\n    };\r\n    /**\r\n     * 获取 迷你面积图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<TinyAreaOptions>;\r\n}\r\n\r\n/** mini 图类型定义需要 omit 很多的 G2 Options 配置 */\r\nexport declare interface TinyAreaOptions extends Omit<Options, 'data' | 'legend' | 'label'> {\r\n    /** 具体的数据 */\r\n    readonly data: number[];\r\n    /** 是否平滑 */\r\n    readonly smooth?: boolean;\r\n    /** 面积折线图形样式 */\r\n    readonly areaStyle?: StyleAttr;\r\n    /** 面积折线图形样式 */\r\n    readonly line?: MappingOptions;\r\n    /** 面积点图形样式 */\r\n    readonly point?: MappingOptions;\r\n}\r\n\r\nexport declare class TinyColumn extends Plot<TinyColumnOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    protected getDefaultOptions(): {\r\n        tooltip: {\r\n            showTitle: boolean;\r\n            shared: boolean;\r\n            showMarkers: boolean;\r\n            containerTpl: string;\r\n            itemTpl: string;\r\n            domStyles: {\r\n                'g2-tooltip': {\r\n                    padding: string;\r\n                    fontSize: string;\r\n                };\r\n            };\r\n        };\r\n    };\r\n    /**\r\n     * 获取 迷你柱形图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<TinyColumnOptions>;\r\n}\r\n\r\n/** mini 图类型定义需要 omit 很多的 G2 Options 配置 */\r\nexport declare interface TinyColumnOptions extends Omit<Options, 'data' | 'legend' | 'label'> {\r\n    /** 具体的数据 */\r\n    readonly data: number[];\r\n    /** 柱状图宽度占比 [0-1] */\r\n    readonly columnWidthRatio?: number;\r\n    /** 迷你柱形图形样式 */\r\n    readonly columnStyle?: StyleAttr;\r\n}\r\n\r\nexport declare class TinyLine extends Plot<TinyLineOptions> {\r\n    /** 图表类型 */\r\n    type: string;\r\n    protected getDefaultOptions(): {\r\n        tooltip: {\r\n            showTitle: boolean;\r\n            shared: boolean;\r\n            showMarkers: boolean;\r\n            containerTpl: string;\r\n            itemTpl: string;\r\n            domStyles: {\r\n                'g2-tooltip': {\r\n                    padding: string;\r\n                    fontSize: string;\r\n                };\r\n            };\r\n        };\r\n    };\r\n    /**\r\n     * 获取 迷你折线图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<TinyLineOptions>;\r\n}\r\n\r\n/** mini 图类型定义需要 omit 很多的 G2 Options 配置 */\r\nexport declare interface TinyLineOptions extends Omit<Options, 'data' | 'legend' | 'label'> {\r\n    /** 具体的数据 */\r\n    readonly data: number[];\r\n    /** 是否平滑 */\r\n    readonly smooth?: boolean;\r\n    /** 是否连接空数据 */\r\n    readonly connectNulls?: boolean;\r\n    /** 折线图形样式 */\r\n    readonly lineStyle?: StyleAttr;\r\n    /** 折线点图形样式 */\r\n    readonly point?: MappingOptions;\r\n}\r\n\r\nexport declare type Tooltip = TooltipOption;\r\n\r\ndeclare interface TrendLine {\r\n    /** 是否显示  */\r\n    readonly visible?: boolean;\r\n    /** 趋势线类型  */\r\n    readonly type?: string;\r\n    /** 配置趋势线样式  */\r\n    readonly style?: ShapeStyle;\r\n    /** 是否绘制置信区间曲线  */\r\n    readonly showConfidence?: boolean;\r\n    /** 配置置信区间样式  */\r\n    readonly confidenceStyle?: ShapeStyle;\r\n}\r\n\r\nexport declare const tuple: <T extends string[]>(...args: T) => T;\r\n\r\nexport declare const tupleNum: <T extends number[]>(...args: T) => T;\r\n\r\nexport declare const version = \"2.0.0-beta.5\";\r\n\r\nexport declare class WordCloud extends Plot<WordCloudOptions> {\r\n    /** 词云图 */\r\n    type: string;\r\n    /**\r\n     * 获取默认的 options 配置项\r\n     */\r\n    protected getDefaultOptions(): Partial<WordCloudOptions>;\r\n    /**\r\n     * 获取 词云图 的适配器\r\n     */\r\n    protected getSchemaAdaptor(): Adaptor<WordCloudOptions>;\r\n    /**\r\n     * 覆写父类的方法，因为词云图使用 data-set 进行布局，原理上有些不一样\r\n     */\r\n    protected triggerResize(): void;\r\n}\r\n\r\nexport declare interface WordCloudOptions extends Options {\r\n    /** 词条内容字段 */\r\n    readonly wordField: string;\r\n    /** 词条权重字段 */\r\n    readonly weightField: string;\r\n    /** 遮罩图片实例 */\r\n    readonly imageMask?: HTMLImageElement;\r\n    /** 最大执行时间 */\r\n    readonly timeInterval?: number;\r\n    /** https://github.com/jasondavies/d3-cloud#spiral */\r\n    readonly spiral?: 'archimedean' | 'rectangular' | ((size: any) => (t: any) => number[]);\r\n    /** 文字样式配置 */\r\n    readonly wordStyle?: WordStyle;\r\n}\r\n\r\n/** 词云字体样式 */\r\ndeclare interface WordStyle {\r\n    /** 词云的字体, 当为函数时，其参数是一个经过处理之后的数据元素的值 */\r\n    readonly fontFamily?: string | ((row: DataItem) => string);\r\n    /** 设置字体的粗细, 当为函数时，其参数是一个经过处理之后的数据元素的值 */\r\n    readonly fontWeight?: FontWeight | ((row: DataItem) => FontWeight);\r\n    /**\r\n     * 每个单词所占的盒子的内边距，默认为 1。 越大单词之间的间隔越大。\r\n     * 当为函数时，其参数是一个经过处理之后的数据元素的值\r\n     */\r\n    readonly padding?: number | ((row: DataItem) => number);\r\n    /** 字体的大小范围,当为函数时，其参数是一个经过处理之后的数据元素的值 */\r\n    readonly fontSize?: [number, number] | ((row: DataItem) => number);\r\n    /** 旋转的最小角度和最大角度 默认 [0, 90] */\r\n    readonly rotation?: [number, number];\r\n    /** 旋转实际的步数,越大可能旋转角度越小, 默认是 2 */\r\n    readonly rotationSteps?: number;\r\n    /** 旋转的比率[0,1] 默认是 0.5 也就是 50%可能发生旋转 */\r\n    readonly rotateRatio?: number;\r\n}\r\n\r\nexport { }\r\n\n        }"}}}}}